{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/lizkavalski/project/jokes/component/randomMaker.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { AppLoading } from \"expo\";\nimport { DeviceMotion } from 'expo-sensors';\nimport styles from \"../styles/styles\";\nimport { LinearGradient } from 'expo-linear-gradient';\nexport default Random = function Random() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState({\n    jokes: 'shake the device'\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var url = process.env.JokeAPI;\n\n  var fetchData = function fetchData() {\n    return fetch(url).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      return setData(json.joke);\n    }).catch(function (error) {\n      return console.error(error);\n    }).finally(function () {\n      return setLoading(false);\n    });\n  };\n\n  var handlePress = function handlePress() {\n    console.log('i got clicked');\n    fetchData();\n  };\n\n  var acceleration = {\n    x: 5,\n    y: 5,\n    z: 5\n  };\n  DeviceMotion.addListener(function (_ref) {\n    var acceleration = _ref.acceleration;\n\n    if (acceleration.x > .9 && acceleration.z > .9) {\n      fetchData();\n      console.log(\"cool\");\n      DeviceMotion.removeAllListeners();\n    }\n  });\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, \"Shake your Device for a Joke\"), isLoading ? React.createElement(ActivityIndicator, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 24\n    }\n  }) : React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 14\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }\n  }, data)), React.createElement(LinearGradient, {\n    colors: ['#AED6F1', '#5DADE2', '#1F618D'],\n    start: [0.0, 0.0],\n    end: [1.0, 1.0],\n    style: styles.linearGradient,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    onPress: handlePress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }, \" Click me!\"))));\n};","map":{"version":3,"sources":["/Users/lizkavalski/project/jokes/component/randomMaker.js"],"names":["React","useState","useEffect","AppLoading","DeviceMotion","styles","LinearGradient","Random","isLoading","setLoading","jokes","data","setData","url","process","env","JokeAPI","fetchData","fetch","then","response","json","joke","catch","error","console","finally","handlePress","log","acceleration","x","y","z","addListener","removeAllListeners","container","text","linearGradient","buttonText"],"mappings":"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","sourcesContent":["import React,{useState, useEffect}from 'react';\nimport {StyleSheet, Text, View, ActivityIndicator, FlatList, Button,} from 'react-native';\nimport {AppLoading} from \"expo\";\nimport { DeviceMotion} from 'expo-sensors';\n//import {axios} from 'axios';\nimport styles from '../styles/styles';\nimport { LinearGradient } from 'expo-linear-gradient';\n\n\n\nexport default Random = () => {\n  const [isLoading, setLoading] = useState(true);\n  const [data, setData] = useState({jokes:'shake the device'});\n  // site for the joke api to pull randon joke\n  let url = process.env.JokeAPI;\n\n  let fetchData=()=> { \n   return fetch(url)\n    .then((response) => response.json())\n    .then((json) => setData(json.joke))\n    .catch((error) => console.error(error))\n    .finally(() => setLoading(false));\n  };\n\n  const handlePress=()=>{\n    console.log('i got clicked')\n      fetchData()\n    }\n  let acceleration={ x:5,y:5,z:5}\n  DeviceMotion.addListener(({acceleration})=> {\n    if(acceleration.x > .9 && acceleration.z >.9){\n      fetchData()\n      console.log(\"cool\");\n      DeviceMotion.removeAllListeners()\n    }\n  })\n      return (\n        <>\n        <View style={styles.container}>\n          <Text>Shake your Device for a Joke</Text>\n          {isLoading ? <ActivityIndicator style={styles.text}/> \n            :(\n             <View>\n              <Text style={styles.text}>{data}</Text>\n            </View>\n            )}\n              <LinearGradient \n              colors={[ '#AED6F1','#5DADE2','#1F618D']} \n              start={[0.0, 0.0]}\n              end={[1.0, 1.0]}\n              style={styles.linearGradient}>\n              <Text style={styles.buttonText} onPress={handlePress}> Click me!</Text>\n              </LinearGradient>\n        </View>\n        </>\n    );\n\n};\n\n\n"]},"metadata":{},"sourceType":"module"}